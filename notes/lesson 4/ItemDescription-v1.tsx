import { useEffect, useState } from "react"
import { useNavigate, useParams } from "react-router-dom";

import { ToDo } from "../models/todo-item"

// todo переход из [index.tsx]
// ? 5.3 В больших проектах пропсы могут сильно разрастаться и есть практика, которую часто используют:
interface ComponentProps {
	todos: ToDo[]
}

// 5.4 И теперь типизацией мы указываем сам интерфейс, который создаём в конкретном компоненте. У каждого компонента может быть свой "interface ComponentProps", а сам props деструктурировать.
// ? 5.5 Пришло время познакомиться с ещё одним React-хуком "useEffect()", который принимает коллбэк, который будет запущен во время загрузки этого компонента. Он объединяет в себе все возможные жизненные циклы компонента: его инициализация, его рендер, его destroy и многие другие.
// ? 5.6 Теперь useEffect() будет отрабатывать минимум один раз при инициализации нашего компонента. И мы сможем через него получить информацию об id в URL (в index.tsx мы использовали именно "id", но могли бы и что-то другое, тогда и здесь было бы другое название). А сделаем мы это с помощью второго хука useParams().
// 5.7 А теперь в useEffect() из массива todos вытащим объект, у которого id такой же, как id из параметра. Используем для этого метод find(). Но т.к. в id у нас попадает строка, а в todo.id содержится число, то нам нужно привести один тип данных к другому.
// ? 5.8 Воспользуемся ещё одним хуком useNavigate() и с помощью него переведём пользователя на страницу 404, если searchTodo не будет найден.
// 5.9 Однако, если объект был найден, то мы будем рендерить информацию о задаче. Воспользуемся useState(), где у нас вначале будет undefined, а затем поместим в setTodo найденный объект searchTodo.
// ? 5.10 Кстати, заметим, что в консоли появился один warning, который советует нам добавить вторым аргументом в useEffect "[todos, id, navigate]", это нужно, чтобы отслеживать в них изменения. Как только один из них изменится, то хук useEffect() сработает вновь и перерендерит весь компонент.

export const ItemDescription = ({ todos }: ComponentProps) => {
	const { id } = useParams(); // достаёт параметры — тот самый динамически подставляющийся в путь id
	const navigate = useNavigate(); // помогает создавать навигацию - переводить приложение на другой URL
	const [todo, setTodo] = useState<ToDo>(); // сохраняет и изменяет состояния
	
	useEffect(() => {
		const searchTodo = todos.find(todo => String(todo.id) === id);
		
		if (searchTodo) {
			setTodo(searchTodo);
		} else {
			navigate('/404');
		}
	}, [todos, id, navigate]); // работает с жизненными циклами

	return (
		<div className="container">
			<h1>{todo?.text}</h1>
		</div>
	)
}